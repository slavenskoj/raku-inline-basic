use v6.d;
use Test;
use Inline::BASIC;

plan 3;

# Test 1: Guessing game logic (without actual input)
{
    my $output = capture-output {
        basic q:to/END/;
        10 REM SIMPLE NUMBER CHECK
        20 LET SECRET = 42
        30 LET GUESS = 50
        40 IF GUESS < SECRET THEN PRINT "TOO LOW!"
        50 IF GUESS > SECRET THEN PRINT "TOO HIGH!"
        60 IF GUESS = SECRET THEN PRINT "YOU GOT IT!"
        70 END
        END
    };
    is $output.trim, "TOO HIGH!", "Guessing game logic works";
}

# Test 2: Factorial calculation
{
    my $output = capture-output {
        basic q:to/END/;
        10 REM FACTORIAL OF 5
        20 LET N = 5
        30 LET F = 1
        40 FOR I = 1 TO N
        50   LET F = F * I
        60 NEXT I
        70 PRINT "FACTORIAL OF "; N; " = "; F
        80 END
        END
    };
    is $output.trim, "FACTORIAL OF 5 = 120", "Factorial calculation works";
}

# Test 3: Fibonacci sequence
{
    my $output = capture-output {
        basic q:to/END/;
        10 REM FIRST 8 FIBONACCI NUMBERS
        20 LET A = 0
        30 LET B = 1
        40 PRINT A; ",";
        50 PRINT B; ",";
        60 FOR I = 1 TO 6
        70   LET C = A + B
        80   PRINT C;
        90   IF I < 6 THEN PRINT ",";
        100  LET A = B
        110  LET B = C
        120 NEXT I
        130 PRINT
        140 END
        END
    };
    is $output.trim, "0,1,1,2,3,5,8,13", "Fibonacci sequence works";
}

# Helper to capture output
sub capture-output(&code) {
    my $output = "";
    my $*OUT = class {
        method print(*@args) { $output ~= @args.join('') }
        method say(*@args) { $output ~= @args.join('') ~ "\n" }
        method flush() { }
    }.new;
    &code();
    return $output;
}